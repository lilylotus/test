plugins {
    id 'org.springframework.boot' version '2.2.8.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'cn.nihility'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url = 'http://maven.aliyun.com/nexus/content/groups/public' }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'commons-io:commons-io:2.7'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}


def branchName = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
def branchCommitId = "git rev-parse HEAD".execute().text.trim()

task clearJar(type: Delete) {
    delete "$buildDir\\libs\\lib"
}

task copyJar(type: Copy, dependsOn: 'clearJar') {
    from configurations.runtimeClasspath
    into "$buildDir\\libs\\lib"
}

jar {
    excludes = ["*.jar"]
    dependsOn clearJar
    dependsOn copyJar

    manifest {
        attributes "branchName": "$branchName"
        attributes "commitId": "$branchCommitId"
        attributes("Main-Class": "cn.nihility.SpringbootStarterApplication")
        /*attributes("branchName": "$branchName",
                "commitId": "$branchCommitId")*/
    }
    if (!configurations.runtimeClasspath.isEmpty()) {
        //manifest.attributes('Class-Path': '. lib/' + configurations.runtimeClasspath.collect { println it.name ; it.name }.join(' lib/'))
        manifest.attributes('Class-Path': '. ' + configurations.runtimeClasspath.files.collect { println it.name; "lib/$it.name" }.join(' '))
    }
}

bootJar {
    excludes = ["*.jar"]
    dependsOn clearJar
    dependsOn copyJar

    manifest {
        attributes "branchName": "$branchName"
        attributes "commitId": "$branchCommitId"
        attributes("Main-Class": "org.springframework.boot.loader.PropertiesLauncher")
        /*attributes("branchName": "$branchName",
                "commitId": "$branchCommitId")*/
    }
    if (!configurations.runtimeClasspath.isEmpty()) {
        //manifest.attributes('Class-Path': '. lib/' + configurations.runtimeClasspath.collect { println it.name ; it.name }.join(' lib/'))
        manifest.attributes('Class-Path': '. ' + configurations.runtimeClasspath.files.collect { println it.name; "lib/$it.name" }.join(' '))
    }
}

task zip(type: Zip, dependsOn: [bootJar]) {
    archiveFileName = "springboot.zip"
    destinationDirectory = file("$buildDir/dist")

    from("$buildDir/libs") {
        /*into("lib")*/
    }

    /*from("$buildDir/libs") {
        into("")
    }*/
}


tasks.withType(JavaCompile) { options.encoding = "UTF-8" }


/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}*/

/* sourceSets.main.allJava / sourceSets.main.allSource */
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
